import re
import asyncio
import logging
import sqlite3

from datetime import datetime, timedelta
from aiogram.enums import ContentType
from config_reader import config, PAYMENTS_TOKEN
from aiogram.types import Message
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.client.session.aiohttp import AiohttpSession

connection = sqlite3.connect('data.db')
cursor = connection.cursor()

connection2 = sqlite3.connect('all_users.db')
cursor2 = connection2.cursor()

#session = AiohttpSession(proxy='http://proxy.server:3128') # –≤ proxy —É–∫–∞–∑–∞–Ω –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä pythonanywhere, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value())#, session=session)
dp = Dispatcher()

PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=169 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
user_id = 0
user2 = 0
name = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ"
user_only = False
canWrite = False


def date_integer(dt_time):
    return 10000 * dt_time.year + 100 * dt_time.month + dt_time.day


async def ChangeStr(string):
    return str(string).replace('@', '')


@dp.callback_query(F.data == "buy")
async def buy(message: types.Message):
    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(message.from_user.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description="ü§ñ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter='fount-of-discounts',
                           payload="test-invoice-payload")


@dp.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")

    print(f"ID –∫—É–ø–∏–≤—à–µ–≥–æ –ø—Ä–µ–º–∏—É–º: {message.from_user.id}")
    cursor.execute('INSERT INTO Users (user, date) VALUES (?, ?)',
                   (f'{message.from_user.id}', date_integer(datetime.now() + timedelta(days=30))))
    connection.commit()

    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
                           f"üíµ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º ü•∞ !!!")


@dp.message(CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'user_(\d+)'))))
async def cmd_start_book(message: Message, command: CommandObject):
    global user_id
    global canWrite
    global user2
    global name

    name = message.from_user.username
    user2 = message.from_user.id
    user_id = command.args.split("_")[1]
    await message.answer(f"‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    canWrite = True


@dp.message(CommandStart())
@dp.message(F.text.lower() == "üì≠ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
async def process_start_command(message: types.Message):
    cursor2.execute("SELECT * FROM users WHERE id = ?", (message.from_user.id,))
    results = cursor2.fetchone()

    if not results:
        cursor2.execute('INSERT INTO Users (id, username) VALUES (?, ?)',
                   (f'{message.from_user.id}', message.from_user.username))
        connection2.commit()

    link = f"t.me/stavrmoris_testbot?start=user_{str(message.from_user.id)}"

    builder = ReplyKeyboardBuilder()

    builder.row(types.KeyboardButton(text="üì≠ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"))
    builder.row(types.KeyboardButton(text="ü•∑ –ê–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
    builder.row(types.KeyboardButton(text="üíµ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))

    message_buttons = [
        [
            types.InlineKeyboardButton(
                 text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                 switch_inline_query=f"\nüíå –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É:\n\n{link}"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="ü•∑ –ê–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                callback_data="message_username"
            )
        ]
    ]

    message_builder = types.InlineKeyboardMarkup(inline_keyboard=message_buttons)

    await message.answer(
        f"‚ù§Ô∏è –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏–π: {link}",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await message.answer(
        f"üìå –ó–∞–∫—Ä–µ–ø–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏!",
        reply_markup=message_builder
    )


@dp.message(F.text.lower() == "ü•∑ –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def message_link(message: Message):
    global user_only

    user_only = True
    await message.answer(f"üë± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å.\n–õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: @people")


@dp.message(F.text.lower() == "üíµ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def send_random_value(message: Message):
    global user_id
    global name
    global user2

    cursor.execute("SELECT * FROM users WHERE user = ?", (user_id,))
    results = cursor.fetchone()

    print("user_id", user_id)
    print("user2", user2)
    print(name)
    print(results)

    if (results and user_id in results) and (results[1] and datetime.strptime(str(results[1]), '%Y%m%d') >= datetime.now()):
        await message.answer(f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {datetime.strptime(str(results[1]))}!")
    else:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üíµ –ö—É–ø–∏—Ç—å",
            callback_data="buy")
        )

        await message.answer(
            f"ü§ñ –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞ –∑–∞ 169 —Ä—É–± –Ω–∞ 30 –¥–Ω–µ–π.",
            reply_markup=builder.as_markup()
        )


@dp.message(F.text)
async def any_message(message: Message):
    global canWrite
    global user_only
    global user_id

    message_text = message.text

    if user_only:
        if message.forward_from is not None:
            user_id = message.forward_from.id
            print("user reply id: ", message.forward_from.id)
            await message.answer("üéâ –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –Ω–∏–∫–Ω–µ–π–º! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            canWrite = True
            user_only = False
        elif message.forward_from is None:
            if message_text[0] == '@':
                message_text = message_text[1:]
                print(message_text)

            cursor2.execute("SELECT * FROM users WHERE username = ?", (message_text,))
            results = cursor2.fetchone()

            if message_text != "ü•∑ –ê–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" or message_text != "üíµ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" or message_text != "üì≠ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞":
                if results and results[1] == message_text:
                    user_id = results[0]
                    canWrite = True
                    user_only = False
                    await message.answer("üéâ –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –Ω–∏–∫–Ω–µ–π–º! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                else:
                    await message.answer("üò¢ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏ —Ä–∞–∑—É –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞, –ª–∏–±–æ –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è.")
            else:
                user_only = False
        else:
            await message.answer(f"ü§ñ –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º.")

    elif canWrite:
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        buttons = [
            [types.InlineKeyboardButton(
                text="ü•∏ –ê–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"user_{str(message.from_user.id)}"
            )],
            [types.InlineKeyboardButton(
                text="ü•∑ –£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                callback_data="premium"
            )]
        ]
        builder = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        await bot.send_message(
            chat_id=user_id,
            text=f"üíå –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}",
            reply_markup=builder
        )

        canWrite = False


@dp.callback_query(F.data == "message_username")
async def message_link(callback: types.CallbackQuery):
    global user_only

    user_only = True
    await callback.message.edit_text(text=f"üë± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å.\n–õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: @people")
    await callback.answer()


@dp.callback_query(F.data.startswith("user_"))
async def callbacks_num(callback: types.CallbackQuery):
    global user_id
    global user2
    global canWrite
    global name

    name = callback.from_user.username
    user_id = callback.data.split("_")[1]
    user2 = callback.from_user.id
    canWrite = True
    await callback.message.edit_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

    await callback.answer()


@dp.callback_query(F.data == "premium")
async def send_random_value(callback: types.CallbackQuery):
    global user_id
    global name
    global user2

    cursor.execute("SELECT * FROM users WHERE user = ?", (user_id,))
    results = cursor.fetchone()

    print("user_id", user_id)
    print("user2", user2)
    print(name)
    print(results)

    if (results and user_id in results) and (results[1] and datetime.strptime(str(results[1]), '%Y%m%d') >= datetime.now()):
        user_name = f"üë± –ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–∞–º –Ω–∞–ø–∏—Å–∞–ª.\n\nüéá –≠—Ç–æ –±—ã–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {user2} –∏ –Ω–∏–∫–æ–º: {name}\n\n\n"
        mention = "[" + user_name + "](t.me/" + str(name) + ")"
        await callback.message.answer(mention, parse_mode="Markdown")
    else:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üíµ –ö—É–ø–∏—Ç—å",
            callback_data="buy")
        )

        await callback.message.answer(
            f"üíÅ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –∫—É–ø–∏—Ç–µ 30 –¥–Ω–µ–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞, –≤—Å–µ–≥–æ –∑–∞ 169 —Ä—É–±.",
            reply_markup=builder.as_markup()
        )
    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())