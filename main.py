import re
import asyncio
import logging
import sqlite3

from datetime import datetime
from aiogram.enums import ContentType
from config_reader import config, PAYMENTS_TOKEN
from aiogram.types import Message
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

connection = sqlite3.connect('data.db')
cursor = connection.cursor()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()

PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=169 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
user_id = 0
canWrite = False


def date_integer(dt_time):
    return 10000 * dt_time.year + 100 * dt_time.month + dt_time.day


@dp.callback_query(F.data == "buy")
async def buy(message: types.Message):
    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(message.from_user.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description="ü§ñ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter='fount-of-discounts',
                           payload="test-invoice-payload")


@dp.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    cursor.execute('INSERT INTO Users (user, date) VALUES (?, ?)',
                   (f'{message.from_user.id}', date_integer(datetime.datetime.now() + datetime.timedelta(days=30))))
    connection.commit()
    connection.close()

    await bot.send_message(message.chat.id,
                           f"üíµ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")


@dp.message(CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'user_(\d+)'))))
async def cmd_start_book(message: Message, command: CommandObject):
    global user_id
    global canWrite

    user_id = command.args.split("_")[1]
    await message.answer(f"‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    canWrite = True


@dp.message(CommandStart())
async def process_start_command(message: types.Message):
    message_buttons = [
        [
            types.InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ",
                callback_data="message_link"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data="message_username"
            )
        ]
    ]

    message_builder = types.InlineKeyboardMarkup(inline_keyboard=message_buttons)

    await message.answer(
        "‚ù§Ô∏è –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏–π:{link}–ó–∞–∫—Ä–µ–ø–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏!",
        reply_markup=message_builder
    )
    # link = f"t.me/stavrmoris_testbot?start=user_{str(message.from_user.id)}"
    # keyboard = InlineKeyboardBuilder()
    #
    # share_button = types.InlineKeyboardButton(
    #     text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
    #     switch_inline_query=f"\nüíå –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É:\n\n{link}"
    # )
    #
    # keyboard.add(share_button)
    #
    # await message.answer(
    #     f"‚ù§Ô∏è –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏–π:\n{link}\n\n–ó–∞–∫—Ä–µ–ø–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏!",
    #     reply_markup=keyboard.as_markup()
    # )


@dp.message(F.text)
async def any_message(message: Message):
    global canWrite

    if canWrite:
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        buttons = [
            [types.InlineKeyboardButton(
                text="ü•∏ –ê–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"user_{str(message.from_user.id)}"
            )],
            [types.InlineKeyboardButton(
                text="ü•∑ –£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                callback_data="premium"
            )]
        ]
        builder = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        await bot.send_message(
            chat_id=user_id,
            text=f"üíå –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}",
            reply_markup=builder
        )

        canWrite = False
@dp.message(F.text)
def link(value: str, message: types.Message):
    value = f"t.me/stavrmoris_testbot?start=user_{str(message.from_user.id)}"
    return value
@dp.callback_query(F.data.startswith("message_link"))
async def message_link(callback: types.CallbackQuery):
    value = link
    keyboard = InlineKeyboardBuilder()

    share_button = types.InlineKeyboardButton(
        text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
        switch_inline_query=f"\nüíå –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É:\n\n{value}"
    )

    keyboard.add(share_button)

    await callback.message.answer(

        text=f"‚ù§Ô∏è –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏–π:\n{value}\n\n–ó–∞–∫—Ä–µ–ø–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏!",
        reply_markup=keyboard.as_markup(),
    )
@dp.callback_query(F.data.startswith("user_"))
async def callbacks_num(callback: types.CallbackQuery):
    global user_id
    global canWrite

    user_id = callback.data.split("_")[1]
    canWrite = True
    await callback.message.answer(f"‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}:")
    await callback.answer()


@dp.callback_query(F.data == "premium")
async def send_random_value(callback: types.CallbackQuery):
    global user_id
    cursor.execute("SELECT * FROM users WHERE user = ?", (user_id,))
    results = cursor.fetchone()

    print(user_id)
    print(results)
    print(results[1])

    if (results and user_id in results) and (results[1] and datetime.strptime(str(results[1]), '%Y%m%d') >= datetime.now()):
        user_name = "üë± –í–∞–º –Ω–∞–ø–∏—Å–∞–ª —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        mention = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
        await bot.send_message(callback.from_user.id, mention, parse_mode="Markdown")
    else:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üíµ –ö—É–ø–∏—Ç—å",
            callback_data="buy")
        )

        await callback.message.answer(
            f"üíÅ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –∫—É–ø–∏—Ç–µ 30 –¥–Ω–µ–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞ –≤—Å–µ–≥–æ –∑–∞ 169 —Ä—É–±.",
            reply_markup=builder.as_markup()
        )
    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
